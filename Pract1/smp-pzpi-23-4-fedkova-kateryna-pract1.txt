МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії 
 
 
ЗВІТ
з практичної роботи № 1 
з дисципліни «Скриптові мови програмування»


 
Виконала:                                                                         Перевірив:
ст. гр. ПЗПІ-23-4                                                              ст. викладач катедри ПІ
Федькова Катерина                                                             Сокорчук Ігор Петрович










Харків 2025
1 ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	06.04.2025
	0.1
	Зроблено звіт
	

































2 ЗАВДАННЯ
Метою даної роботи є написання програми на  Bash, яка друкує на екрані ялинку, яка відповідає даним вимогам:
-                ялинка складається з двох ярусів гілок, стовбура та шару снігу;
-                ялинка повинна бути симетричною;
-                яруси гілок повинні утворювати рівнобедрені трикутники, у яких сусідні рядки відрізняються на два символи;
-                ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу;
-                висота стовбура та товщина снігу мають бути завжди такі, як у прикладі;
-                висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується програмі в її параметрах;
-                параметри повинні мати додатнє значення;
-                вказані значення повинні округлятися до потрібних не більше ніж на одиницю у меншу сторону;
-                якщо вказану ялинку зобразити неможливо, програма повинна вивести помилку;
-                використати умови, цикли та функцію.
 
 
 
 
3 ОПИС ВИКОНАНОЇ РОБОТИ
Весь код для відображення ялинки знаходиться у додатку А. Перший рядок скрипта – це shebang, який вказує системі, як потрібно виконувати скрипт. 
 
1 #! /bin/bash
 
Перевіряємо кількість переданих аргументів. Якщо їх не два, то буде виведено повідомлення про помилку та програма завершиться з кодом 1.
 
6 if [ "$#" -ne 2 ]; then
7         echo "Повинно бути два параметри" >&2
8         exit 1
9 fi
 
Зберігаємо значення переданих аргументів у змінні для зберігання висоти ялинки та ширини снігу.
 
11 treeHeight=$1
12 snowWidth=$2
 
Перевіряємо чи обидва аргументи додатні. Якщо ні, то буде виведено повідомлення про помилку та програма завершиться з кодом 2.
 
 14 if ((treeHeight <= 0 || snowWidth <= 0)); then
 15     echo "Неправильні аргументи" >&2
 16     exit 2
 17 fi
 
Перевіряємо ширину снігу. Якщо число парне — воно зменшується на 1.
 
19 if ((snowWidth % 2 == 0)); then
20         snowWidth=$((snowWidth - 1))
21 fi
 
Перевіряємо, чи можливо побудувати ялинку. Для цього ширина снігу повинна бути не менше 5, а різниця між висотою ялинки та шириною снігу може бути або 1, або 2. Якщо умова не виконується, то буде виведено повідомлення про помилку та програма завершиться з кодом 3.
 23 if (( snowWidth <= 5 || ( (treeHeight - snowWidth) != 1 && (treeHeight - snowWidth) != 2 ) )); then
 24     echo "Ялинка не може бути побудована" >&2
 25     exit 3
 26 fi
 
Якщо висота дерева більша за ширину снігу на 2 то висота зменшується на 1.
 
28 if (( (treeHeight - snowWidth) == 2 )); then
29         treeHeight=$((treeHeight - 1))
30 fi
 
Обчислюємо висоту верхнього та нижнього ярусів. Для цього віднімаємо висоту шару снігу та стовбура від загальної висоти та ділимо на 2. Для верхнього ярусу висота повинна бути на 1 більше.
 
29 levelHeight=$(( $((treeHeight - 3)) / 2))
30 topHeight=$((levelHeight + 1))
31 bottomHeight=levelHeight
 
Ініціалізуємо необхідні для побудови змінні. Змінна number – це кількість символів у поточному рядку ялинки, filledLine – рядок, який виводиться, currentType – символ, який виводиться.
 
33 number=1
34 filledLine=""
35 currentType="*"
 
Реалізовуємо функцію для побудови ярусу. Параметр $1 – висота ярусу, $2 – зсув (0 для верхнього ярусу, 1 для нижнього згідно з прикладом). Оголошуємо змінну num, яка є лічильником для виводу елементів. Ітеруємося по кількості рядків ярусу та додаємо пробіли перед рядком символів. За допомогою циклу додаємо до рядка символи * або # залежно від поточного типу. Кількість символів визначає змінна number, яка зростає на 2 після кожного рівня. Якщо поточний символ *, то наступний рядок буде #, і навпаки. Зміна filledLine очищується перед наступним рядком.
37 function drawLevel {
38         num=0
39         for (( level = 0; level < $1; level++ )); do
40         for (( space = 0; space < $(($((snowWidth / 2)) - level - $2)); space++ )); do
41             filledLine+=" "
42         done
43         until [ $num -ge $number ]; do
44             filledLine+="$currentType"
45             ((num++))
46         done
47         num=0
48         echo "$filledLine"
49         if [[ "$currentType" == "*" ]]; then
50             currentType="#"
51         else
52             currentType="*"
53         fi
54         filledLine=""
55         number=$((number + 2))
56         done
57 }
 
Реалізовуємо функцію drawTrunk, яка будує стовбур. За допомогою циклу малюємо два рядки стовбура. Спочатку додаємо пробіли зліва, щоб розташувати ### по центру.
 
59 function drawTrunk {
60         for i in {0..1}; do
61         for ((space = 0; space < $(($((snowWidth / 2)) - 1)); space++ )); do
62             filledLine+=" "
63         done
64         filledLine+="###"
65         echo "$filledLine"
66         filledLine=""
67         done
68 filledLine=""
 
Реалізовуємо функцію drawSnow для побудови снігу. За допомогою циклу ітеруємося від 1 до значення snowWidth. У кожній ітерації додаємо одну зірочку до filledLine.
 
72 function drawSnow {
73         count=1
74         while [ "$count" -le "$snowWidth" ]; do
75             filledLine+="*"
76         ((count++))
77         done
78         echo "$filledLine"
79 }
 
Малюємо ялинку використовуючи необхідні функції.
 
81 drawLevel $topHeight 0
82
83 number=3
84
85 drawLevel $bottomHeight 1
86
87 drawTrunk
88 drawSnow
 
 


 




























4 ВИСНОВКИ
Під час виконання практичної роботи було розроблено Bash-скрипт, який будує зображення ялинки з двома ярусами гілок, стовбуром та шаром снігу. Програма перевіряє коректність введених параметрів, округлює значення в разі необхідності, забезпечує вивід повідомлення про помилку у разі неможливості побудови ялинки з заданими параметрами. У скрипті використано обов’язкові умовні конструкції, функції, а також декілька видів циклів.
 
 
 






















 
ВИКОРИСТАНІ ДЖЕРЕЛА 
1. learnxinyminutes-docs/uk-ua/bash-ua.html.markdown at master · IhorSokorchuk/learnxinyminutes-docs. GitHub. URL: https://github.com/IhorSokorchuk/learnxinyminutes-docs/blob/master/uk-ua/bash-ua.html.markdown (дата звернення: 05.04.2025).

































ДОДАТОК В
Програмний код


GitHub репозиторій: https://github.com/NureFedkovaKateryna/smp-pzpi-23-4-fedkova-kateryna/blob/main/Pract1/smp-pzpi-23-4-fedkova-kateryna-pract1/smp-pzpi-23-4-fedkova-kateryna-pract1-code
  1 #! /bin/bash
  2
  3 if [ "$#" -ne 2 ]; then
  4     echo "Повинно бути два параметри" >&2
  5     exit 1
  6 fi
  7
  8 treeHeight=$1
  9 snowWidth=$2
 10
 11 if ((treeHeight <= 0 || snowWidth <= 0)); then
 12     echo "Неправильні аргументи" >&2
 13     exit 2
 14 fi
 15
 16 if ((snowWidth % 2 == 0)); then
 17     snowWidth=$((snowWidth - 1))
 18 fi
 19
 20 if (( snowWidth <= 5 || ( (treeHeight - snowWidth) != 1 && (treeHeight - snowWidth) != 2 ) )); then
 21     echo "Ялинка не може бути побудована" >&2
 22     exit 3
 23 fi
 24
 25 if (( (treeHeight - snowWidth) == 2 )); then
 26     treeHeight=$((treeHeight - 1))
 27 fi
 28
 29 levelHeight=$(( $((treeHeight - 3)) / 2))
 30 topHeight=$((levelHeight + 1))
 31 bottomHeight=levelHeight
 32
 33 number=1
 34 filledLine=""
 35 currentType="*"
 36
 37 function drawLevel {
 38     num=0
 39     for (( level = 0; level < $1; level++ )); do
 40     for (( space = 0; space < $(($((snowWidth / 2)) - level - $2)); space++ )); do
 41         filledLine+=" "
 42     done
 43     until [ $num -ge $number ]; do
 44         filledLine+="$currentType"
 45         ((num++))
 46     done
 47     num=0
 48     echo "$filledLine"
 49     if [[ "$currentType" == "*" ]]; then
 50         currentType="#"
 51     else
 52         currentType="*"
 53     fi
 54     filledLine=""
 55     number=$((number + 2))
 56     done
 57 }
 58
 59 function drawTrunk {
 60     for i in {0..1}; do
 61     for ((space = 0; space < $(($((snowWidth / 2)) - 1)); space++ )); do
 62         filledLine+=" "
 63     done
 64     filledLine+="###"
 65     echo "$filledLine"
 66     filledLine=""
 67     done
 68     filledLine=""
 69 }
 70
 71
 72 function drawSnow {
 73     count=1
 74     while [ "$count" -le "$snowWidth" ]; do
 75         filledLine+="*"
 76     ((count++))
 77     done
 78     echo "$filledLine"
 79 }
 80
 81 drawLevel $topHeight 0
 82
 83 number=3
 84
 85 drawLevel $bottomHeight 1
 86
 87 drawTrunk
 88 drawSnow