#!/bin/bash

groupName=""
fileName=""
printGoogleCalendarData=true
printHelp=false
printVersion=false
groupExists=false
singleGroup=false
headers="Subject, \"Start Date\", \"Start Time\", \"End Date\", \"End Time\", Description"

for arg in "$@"
do
    if [[ $arg == --help ]]; then
        printHelp=true
    elif [[ $arg == --version ]]; then
        printVersion=true
    elif [[ $arg == -q || $arg == --quiet ]]; then
        printGoogleCalendarData=false
    elif [[ $arg == *.csv ]]; then
       fileName="$arg"
    elif [[ $arg =~ ПЗПІ-23- ]]; then
        groupName="$arg"
    fi
done

if [[ "$printHelp" == true || "$printVersion" == true ]] && [[ "$printGoogleCalendarData" == false || -n "$groupName" || -n "$fileName" ]]; then
    echo "Помилка: не можна одночасно викликати --help/--version та -q/--quiet/академ_група/файл_із_cist.csv"
    exit 1
fi

if $printHelp; then
    echo "Синтаксис виклику: {ім'я облікового запису}-task2 [--help | --version] | [[-q | --quiet] [академ_група] файл_із_cist.csv] "
    exit 0
fi

if $printVersion; then
    echo "Версія 1.0"
    exit 0
fi

if [ -z "$fileName" ]; then
    select file in $(ls | grep -E '^TimeTable_[0-9]{2}_[0-9]{2}_[0-9]{4}\.csv' | sort -t "_" -k4,4 -k3,3 -k2,2) QUIT; do
        if  [[ "$file" == "QUIT" ]]; then
            exit 0
        fi
        fileName="$file"
        break
    done
fi

if ! [ -f "$fileName" ]; then
    echo "Файл не існує" >&2
    exit 2
fi

if ! [ -r "$fileName" ]; then
    echo "Файл не доступний для читання" >&2
    exit 3
fi

outputFileName="Google_$fileName"

function fileError() {
    echo "Помилка при обробці файлу" >&2
    exit 4
}

groupsInFile=($(cat "$fileName" | sed 's/\r/ end\n/g' | iconv -f cp1251 -t utf-8 |
    awk 'BEGIN { FPAT="[^,]*|\"[^\"]*\"" }
    {
        gsub(/"/, "", $1)
        if ( $1 ~ /^ПЗПІ-23-/)
            print substr($1, 0, index($1, " "))
        else
            if (match($1, /ПЗПІ-23-[0-9]+/)) {
                print substr($1, RSTART, RLENGTH)
            }
    }' | sort | uniq)) || fileError

if [ ${#groupsInFile[@]} -eq 1 ]; then
    singleGroup=true
    groupName="${groupsInFile[0]}"
fi

function selectGroup() {
    select group in "${groupsInFile[@]}" QUIT; do
        if [[ "$group" == "QUIT" ]]; then
            exit 0
        fi
        groupName="$group"
        break
    done
}

if [ -z "$groupName" ]; then
    selectGroup
fi

for group in "${groupsInFile[@]}"; do
    if [[ "$group" == "$groupName" ]]; then
        groupExists=true
        break
    fi
done

if [[ "$groupExists" == false ]]; then
    echo "Група не знайдена в файлі! Оберіть іншу"
    selectGroup
fi

function getColumnNum() {
    columnIndex=$(cat "$fileName" | sed 's/\r/ end\n/g' | iconv -f cp1251 -t utf-8 |
    awk -v colName="$1" 'BEGIN { FPAT="[^,]*|\"[^\"]*\"" }
    NR==1 {
        for ( i = 1; i <= NF; i++) {
            if ($i == "\"" colName "\"") {
                print i
                break
            }
        }
    }') || fileError
    echo "$columnIndex"
}

topicIndex=$(getColumnNum "Тема")
startDateIndex=$(getColumnNum "Дата начала")
startTimeIndex=$(getColumnNum "Время начала")
endDateIndex=$(getColumnNum "Дата завершения")
endTimeIndex=$(getColumnNum "Время завершения")
descriptionIndex=$(getColumnNum "Описание")

cat "$fileName" |
sed 's/\r/ end\n/g' |
iconv -f cp1251 -t utf-8 |
awk -v startDate="$startDateIndex" -v startTime="$startTimeIndex" '
BEGIN { FPAT="[^,]*|\"[^\"]*\"" }
NR > 1 {
    split($startDate, dateArr, ".")
    sortKey= dateArr[3] "-" dateArr[2] "-" dateArr[1] " " $startTime
    print sortKey "|" $0
}' |
sort |
cut -d '|' -f2- |
sed -E 's/([0-9]{2})\.([0-9]{2})\.([0-9]{4})/\2\/\1\/\3/g' |
awk -v group="$groupName" -v topic="$topicIndex" -v startDate="$startDateIndex" -v startTime="$startTimeIndex" \
-v endDate="$endDateIndex" -v endTime="$endTimeIndex" -v description="$descriptionIndex" -v single="$singleGroup" '
BEGIN { FPAT="[^,]*|\"[^\"]*\""; OFS="," }
match($1, "^\"" group) || single == "true" {
    gsub(/"/, "", $(topic))
    if (single == "true") {
        topicInfo=$(topic)
    }
    else {
        topicInfo=substr($(topic), index($(topic), " ") + 3)
    }

    if (index(topicInfo, ";") == 0) {
        getData()
    }
    else {
        delete subjectArr
        split(topicInfo, parts, / *; */)
        for (i in parts) {
            match(parts[i], /^*[[:space:]]*([[:alnum:]]+)/, arr)
            subject=arr[1]
            if (subject != "") {
                if (subjectArr[subject] != "") {
                    subjectArr[subject]= subjectArr[subject] "; " parts[i]
                } else {
                    subjectArr[subject] = parts[i]
                }
            }
        }

        if (length(subjectArr) > 1) {
            for (i in subjectArr) {
                topicInfo=subjectArr[i]
                getData()
            }
        }
        else {
            getData()
        }
    }
}

function getData() {
    type=substr(topicInfo, index(topicInfo, " ") + 1, 2)
    startDateInfo=$(startDate)
    startTimeInfo=$(startTime)
    endDateInfo=$(endDate)
    endTimeInfo=$(endTime)
    descriptionInfo=$(description)

    gsub(/"/, "", startTimeInfo)
    gsub(/"/, "", endTimeInfo)

    split(startTimeInfo, startArr, ":")
    split(endTimeInfo, endArr, ":")

    startTimeInfo=formatTime(startArr[1], startArr[2])
    endTimeInfo=formatTime(endArr[1], endArr[2])

    key="\"" topicInfo type "\""

    if (type != "Лб" || (type == "Лб" && labsAdded[key] % 2 == 0))
        count[key]++
    labsAdded[key]++

    topicInfo = "\"" topicInfo "; №" count[key] "\""

    print topicInfo, startDateInfo, startTimeInfo, endDateInfo, endTimeInfo, descriptionInfo
}

function formatTime(hours, minutes) {
    newTime=""
    if (hours == "00")
        newTime= "\"12:" minutes " AM\""
    else if (hours == "12")
        newTime="\"12:" minutes " PM\""
    else if (hours < 12)
        newTime= "\"" hours ":" minutes " AM\""
    else if (hours > 12)
        if (hours - 12 < 10)
            newTime="\"0" (hours - 12) ":" minutes " PM\""
        else
            newTime= "\"" (hours - 12) ":" minutes " PM\""
    return newTime
}' |
if $printGoogleCalendarData; then
    echo "$headers" | tee "$outputFileName"
    tee -a "$outputFileName"
else
    echo "$headers" | tee "$outputFileName" > /dev/null
    tee -a "$outputFileName" > /dev/null
fi || fileError
